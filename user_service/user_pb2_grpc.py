# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import user_pb2 as user__pb2


class UserAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/user.UserAPI/Create',
                request_serializer=user__pb2.UserCreateRequest.SerializeToString,
                response_deserializer=user__pb2.User.FromString,
                )
        self.Me = channel.unary_unary(
                '/user.UserAPI/Me',
                request_serializer=user__pb2.UserMeRequest.SerializeToString,
                response_deserializer=user__pb2.User.FromString,
                )
        self.Update = channel.unary_unary(
                '/user.UserAPI/Update',
                request_serializer=user__pb2.UserUpdateRequest.SerializeToString,
                response_deserializer=user__pb2.User.FromString,
                )
        self.Login = channel.unary_unary(
                '/user.UserAPI/Login',
                request_serializer=user__pb2.UserLoginRequest.SerializeToString,
                response_deserializer=user__pb2.UserLoginResponse.FromString,
                )
        self.Logout = channel.unary_unary(
                '/user.UserAPI/Logout',
                request_serializer=user__pb2.UserLogoutRequest.SerializeToString,
                response_deserializer=user__pb2.MessageResponse.FromString,
                )
        self.Issue_otp = channel.unary_unary(
                '/user.UserAPI/Issue_otp',
                request_serializer=user__pb2.IssueOtpRequest.SerializeToString,
                response_deserializer=user__pb2.MessageResponse.FromString,
                )
        self.Evaluate_otp = channel.unary_unary(
                '/user.UserAPI/Evaluate_otp',
                request_serializer=user__pb2.EvaluateOtpRequest.SerializeToString,
                response_deserializer=user__pb2.MessageResponse.FromString,
                )


class UserAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Me(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Issue_otp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Evaluate_otp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=user__pb2.UserCreateRequest.FromString,
                    response_serializer=user__pb2.User.SerializeToString,
            ),
            'Me': grpc.unary_unary_rpc_method_handler(
                    servicer.Me,
                    request_deserializer=user__pb2.UserMeRequest.FromString,
                    response_serializer=user__pb2.User.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=user__pb2.UserUpdateRequest.FromString,
                    response_serializer=user__pb2.User.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=user__pb2.UserLoginRequest.FromString,
                    response_serializer=user__pb2.UserLoginResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=user__pb2.UserLogoutRequest.FromString,
                    response_serializer=user__pb2.MessageResponse.SerializeToString,
            ),
            'Issue_otp': grpc.unary_unary_rpc_method_handler(
                    servicer.Issue_otp,
                    request_deserializer=user__pb2.IssueOtpRequest.FromString,
                    response_serializer=user__pb2.MessageResponse.SerializeToString,
            ),
            'Evaluate_otp': grpc.unary_unary_rpc_method_handler(
                    servicer.Evaluate_otp,
                    request_deserializer=user__pb2.EvaluateOtpRequest.FromString,
                    response_serializer=user__pb2.MessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'user.UserAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user.UserAPI/Create',
            user__pb2.UserCreateRequest.SerializeToString,
            user__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Me(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user.UserAPI/Me',
            user__pb2.UserMeRequest.SerializeToString,
            user__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user.UserAPI/Update',
            user__pb2.UserUpdateRequest.SerializeToString,
            user__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user.UserAPI/Login',
            user__pb2.UserLoginRequest.SerializeToString,
            user__pb2.UserLoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user.UserAPI/Logout',
            user__pb2.UserLogoutRequest.SerializeToString,
            user__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Issue_otp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user.UserAPI/Issue_otp',
            user__pb2.IssueOtpRequest.SerializeToString,
            user__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Evaluate_otp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user.UserAPI/Evaluate_otp',
            user__pb2.EvaluateOtpRequest.SerializeToString,
            user__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
